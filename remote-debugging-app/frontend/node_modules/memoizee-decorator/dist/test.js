'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _dec, _desc, _value, _class;

var _index = require('./index');

var _index2 = _interopRequireDefault(_index);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
	var desc = {};
	Object['ke' + 'ys'](descriptor).forEach(function (key) {
		desc[key] = descriptor[key];
	});
	desc.enumerable = !!desc.enumerable;
	desc.configurable = !!desc.configurable;

	if ('value' in desc || desc.initializer) {
		desc.writable = true;
	}

	desc = decorators.slice().reverse().reduce(function (desc, decorator) {
		return decorator(target, property, desc) || desc;
	}, desc);

	if (context && desc.initializer !== void 0) {
		desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
		desc.initializer = undefined;
	}

	if (desc.initializer === void 0) {
		Object['define' + 'Property'](target, property, desc);
		desc = null;
	}

	return desc;
}

var Foo = (_dec = (0, _index2.default)({ length: 1 }), (_class = function () {
	function Foo(num) {
		_classCallCheck(this, Foo);

		this._myNum = num;
		this.calculateCount = 0;
	}

	_createClass(Foo, [{
		key: 'bar1',
		value: function bar1() {
			var num = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 999;

			console.log('Complicated calculations...');
			this.calculateCount++;
			return this._myNum + '-' + num;
		}
	}, {
		key: 'bar2',
		value: function bar2(object) {
			console.log('Complicated calculations...');
			this.calculateCount++;
			return this._myNum + '-' + JSON.stringify(object);
		}
	}, {
		key: 'myNum',
		get: function get() {
			console.log('Complicated calculations...');
			this.calculateCount++;
			return this._myNum;
		}
	}, {
		key: 'calcCount',
		get: function get() {
			return "(" + this.calculateCount + ")";
		}
	}]);

	return Foo;
}(), (_applyDecoratedDescriptor(_class.prototype, 'bar1', [_dec], Object.getOwnPropertyDescriptor(_class.prototype, 'bar1'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'bar2', [_index2.default], Object.getOwnPropertyDescriptor(_class.prototype, 'bar2'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'myNum', [_index2.default], Object.getOwnPropertyDescriptor(_class.prototype, 'myNum'), _class.prototype)), _class));


var foo = new Foo(100);
var foo2 = new Foo(50);

console.log('>> Testing: foo.bar1');
console.log(foo.bar1(), foo.calcCount);
console.log(foo.bar1(), foo.calcCount);
console.log(foo.bar1(3), foo.calcCount);

console.log('>> Testing: foo2.bar1');
console.log(foo2.bar1(4), foo2.calcCount);
console.log(foo2.bar1(4), foo2.calcCount);
console.log(foo2.bar1(5), foo2.calcCount);

var obj = { hello: 'world' };

console.log('>> Testing: foo.bar2');
console.log(foo.bar2(obj), foo.calcCount);
console.log(foo.bar2(obj), foo.calcCount);
console.log(foo.bar2({ farewell: 'world' }), foo.calcCount);

console.log('>> Testing: foo.myNum');
console.log(foo.myNum, foo.calcCount);
console.log(foo.myNum, foo.calcCount);

console.log('>> Testing: foo2.myNum');
console.log(foo2.myNum, foo2.calcCount);
console.log(foo2.myNum, foo2.calcCount);