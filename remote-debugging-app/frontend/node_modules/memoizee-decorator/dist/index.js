'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /**
                                                                                                                                                                                                                                                                   * Original Code
                                                                                                                                                                                                                                                                   * @copyright 2015, Andrey Popp <8mayday@gmail.com>
                                                                                                                                                                                                                                                                   * Modifications
                                                                                                                                                                                                                                                                   * @copyright 2017, zwigglers <zwigglers@gmail.com>
                                                                                                                                                                                                                                                                   */

exports.default = memoize;

var _memoizee = require('memoizee');

var _memoizee2 = _interopRequireDefault(_memoizee);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var SENTINEL = {};

function memoize() {
  var scope = { options: {} };

  // no arguments

  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  if (args.length == 3) {
    return _memoize.apply(scope, args);
    // has options argument
  } else if (args.length == 1) {
    scope.options = args[0];
    return _memoize.bind(scope);
  } else {
    throw new Error('Unknown number of arguments');
  }
};

function _memoize(target, name, descriptor) {
  if (typeof descriptor.value === 'function') {
    return _memoizeMethod(target, name, descriptor, this.options);
  } else if (typeof descriptor.get === 'function') {
    return _memoizeGetter(target, name, descriptor, this.options);
  } else {
    throw new Error('@memoize decorator can be applied to methods or getters, got ' + String(descriptor.value) + ' instead');
  }
}

function _memoizeGetter(target, name, descriptor, options) {
  var memoizedName = '_memoized_' + name;
  var _get = descriptor.get;
  target[memoizedName] = SENTINEL;
  return _extends({}, descriptor, {
    get: function get() {
      if (this[memoizedName] === SENTINEL) {
        this[memoizedName] = (0, _memoizee2.default)(_get, options);
      }
      return this[memoizedName].call(this);
    }
  });
}

function _memoizeMethod(target, name, descriptor, options) {
  var memoizedName = '_memoized_' + name;
  var _value = descriptor.value;
  target[memoizedName] = SENTINEL;
  return _extends({}, descriptor, {
    value: function value() {
      var _memoizedName;

      if (this[memoizedName] === SENTINEL) {
        this[memoizedName] = (0, _memoizee2.default)(_value, options);
      }

      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      return (_memoizedName = this[memoizedName]).call.apply(_memoizedName, [this].concat(args));
    }
  });
}