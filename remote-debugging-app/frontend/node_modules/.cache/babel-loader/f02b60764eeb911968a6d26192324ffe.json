{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../../addon/mode/simple\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../../addon/mode/simple\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  var kKeywords = [\"align\", \"block\", \"br(_if|_table|_on_(cast|data|func|i31|null))?\", \"call(_indirect|_ref)?\", \"current_memory\", \"\\\\bdata\\\\b\", \"drop\", \"elem\", \"else\", \"end\", \"export\", \"\\\\bextern\\\\b\", \"\\\\bfunc\\\\b\", \"global(\\\\.(get|set))?\", \"if\", \"import\", \"local(\\\\.(get|set|tee))?\", \"loop\", \"module\", \"mut\", \"nop\", \"offset\", \"param\", \"result\", \"return(_call(_indirect|_ref)?)?\", \"select\", \"start\", \"table(\\\\.(size|get|set|size|grow|fill|init|copy))?\", \"then\", \"type\", \"unreachable\", // Numeric opcodes.\n  \"i(32|64)\\\\.(store(8|16)|(load(8|16)_[su]))\", \"i64\\\\.(load32_[su]|store32)\", \"[fi](32|64)\\\\.(const|load|store)\", \"f(32|64)\\\\.(abs|add|ceil|copysign|div|eq|floor|[gl][et]|max|min|mul|nearest|neg?|sqrt|sub|trunc)\", \"i(32|64)\\\\.(a[dn]d|c[lt]z|(div|rem)_[su]|eqz?|[gl][te]_[su]|mul|ne|popcnt|rot[lr]|sh(l|r_[su])|sub|x?or)\", \"i64\\\\.extend_[su]_i32\", \"i32\\\\.wrap_i64\", \"i(32|64)\\\\.trunc_f(32|64)_[su]\", \"f(32|64)\\\\.convert_i(32|64)_[su]\", \"f64\\\\.promote_f32\", \"f32\\\\.demote_f64\", \"f32\\\\.reinterpret_i32\", \"i32\\\\.reinterpret_f32\", \"f64\\\\.reinterpret_i64\", \"i64\\\\.reinterpret_f64\", // Atomics.\n  \"memory(\\\\.((atomic\\\\.(notify|wait(32|64)))|grow|size))?\", \"i64\\.atomic\\\\.(load32_u|store32|rmw32\\\\.(a[dn]d|sub|x?or|(cmp)?xchg)_u)\", \"i(32|64)\\\\.atomic\\\\.(load((8|16)_u)?|store(8|16)?|rmw(\\\\.(a[dn]d|sub|x?or|(cmp)?xchg)|(8|16)\\\\.(a[dn]d|sub|x?or|(cmp)?xchg)_u))\", // SIMD.\n  \"v128\\\\.load(8x8|16x4|32x2)_[su]\", \"v128\\\\.load(8|16|32|64)_splat\", \"v128\\\\.(load|store)(8|16|32|64)_lane\", \"v128\\\\.load(32|64)_zero\", \"v128\\.(load|store|const|not|andnot|and|or|xor|bitselect|any_true)\", \"i(8x16|16x8)\\\\.(extract_lane_[su]|(add|sub)_sat_[su]|avgr_u)\", \"i(8x16|16x8|32x4|64x2)\\\\.(neg|add|sub|abs|shl|shr_[su]|all_true|bitmask|eq|ne|[lg][te]_s)\", \"(i(8x16|16x8|32x4|64x2)|f(32x4|64x2))\\.(splat|replace_lane)\", \"i(8x16|16x8|32x4)\\\\.(([lg][te]_u)|((min|max)_[su]))\", \"f(32x4|64x2)\\\\.(neg|add|sub|abs|nearest|eq|ne|[lg][te]|sqrt|mul|div|min|max|ceil|floor|trunc)\", \"[fi](32x4|64x2)\\\\.extract_lane\", \"i8x16\\\\.(shuffle|swizzle|popcnt|narrow_i16x8_[su])\", \"i16x8\\\\.(narrow_i32x4_[su]|mul|extadd_pairwise_i8x16_[su]|q15mulr_sat_s)\", \"i16x8\\\\.(extend|extmul)_(low|high)_i8x16_[su]\", \"i32x4\\\\.(mul|dot_i16x8_s|trunc_sat_f64x2_[su]_zero)\", \"i32x4\\\\.((extend|extmul)_(low|high)_i16x8_|trunc_sat_f32x4_|extadd_pairwise_i16x8_)[su]\", \"i64x2\\\\.(mul|(extend|extmul)_(low|high)_i32x4_[su])\", \"f32x4\\\\.(convert_i32x4_[su]|demote_f64x2_zero)\", \"f64x2\\\\.(promote_low_f32x4|convert_low_i32x4_[su])\", // Reference types, function references, and GC.\n  \"\\\\bany\\\\b\", \"array\\\\.len\", \"(array|struct)(\\\\.(new_(default_)?with_rtt|get(_[su])?|set))?\", \"\\\\beq\\\\b\", \"field\", \"i31\\\\.(new|get_[su])\", \"\\\\bnull\\\\b\", \"ref(\\\\.(([ai]s_(data|func|i31))|cast|eq|func|(is_|as_non_)?null|test))?\", \"rtt(\\\\.(canon|sub))?\"];\n  CodeMirror.defineSimpleMode('wast', {\n    start: [{\n      regex: /[+\\-]?(?:nan(?::0x[0-9a-fA-F]+)?|infinity|inf|0x[0-9a-fA-F]+\\.?[0-9a-fA-F]*p[+\\/-]?\\d+|\\d+(?:\\.\\d*)?[eE][+\\-]?\\d*|\\d+\\.\\d*|0x[0-9a-fA-F]+|\\d+)/,\n      token: \"number\"\n    }, {\n      regex: new RegExp(kKeywords.join('|')),\n      token: \"keyword\"\n    }, {\n      regex: /\\b((any|data|eq|extern|i31|func)ref|[fi](32|64)|i(8|16))\\b/,\n      token: \"atom\"\n    }, {\n      regex: /\\$([a-zA-Z0-9_`\\+\\-\\*\\/\\\\\\^~=<>!\\?@#$%&|:\\.]+)/,\n      token: \"variable-2\"\n    }, {\n      regex: /\"(?:[^\"\\\\\\x00-\\x1f\\x7f]|\\\\[nt\\\\'\"]|\\\\[0-9a-fA-F][0-9a-fA-F])*\"/,\n      token: \"string\"\n    }, {\n      regex: /\\(;.*?/,\n      token: \"comment\",\n      next: \"comment\"\n    }, {\n      regex: /;;.*$/,\n      token: \"comment\"\n    }, {\n      regex: /\\(/,\n      indent: true\n    }, {\n      regex: /\\)/,\n      dedent: true\n    }],\n    comment: [{\n      regex: /.*?;\\)/,\n      token: \"comment\",\n      next: \"start\"\n    }, {\n      regex: /.*/,\n      token: \"comment\"\n    }],\n    meta: {\n      dontIndentStates: ['comment']\n    }\n  }); // https://github.com/WebAssembly/design/issues/981 mentions text/webassembly,\n  // which seems like a reasonable choice, although it's not standard right now.\n\n  CodeMirror.defineMIME(\"text/webassembly\", \"wast\");\n});","map":{"version":3,"sources":["D:/Facultate/Licenta/remote-debugging-app/remote-debugging-app/frontend/node_modules/codemirror/mode/wast/wast.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","kKeywords","defineSimpleMode","start","regex","token","RegExp","join","next","indent","dedent","comment","meta","dontIndentStates","defineMIME"],"mappings":"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","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../../addon/mode/simple\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../../addon/mode/simple\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nvar kKeywords = [\n    \"align\",\n    \"block\",\n    \"br(_if|_table|_on_(cast|data|func|i31|null))?\",\n    \"call(_indirect|_ref)?\",\n    \"current_memory\",\n    \"\\\\bdata\\\\b\",\n    \"drop\",\n    \"elem\",\n    \"else\",\n    \"end\",\n    \"export\",\n    \"\\\\bextern\\\\b\",\n    \"\\\\bfunc\\\\b\",\n    \"global(\\\\.(get|set))?\",\n    \"if\",\n    \"import\",\n    \"local(\\\\.(get|set|tee))?\",\n    \"loop\",\n    \"module\",\n    \"mut\",\n    \"nop\",\n    \"offset\",\n    \"param\",\n    \"result\",\n    \"return(_call(_indirect|_ref)?)?\",\n    \"select\",\n    \"start\",\n    \"table(\\\\.(size|get|set|size|grow|fill|init|copy))?\",\n    \"then\",\n    \"type\",\n    \"unreachable\",\n\n    // Numeric opcodes.\n    \"i(32|64)\\\\.(store(8|16)|(load(8|16)_[su]))\",\n    \"i64\\\\.(load32_[su]|store32)\",\n    \"[fi](32|64)\\\\.(const|load|store)\",\n    \"f(32|64)\\\\.(abs|add|ceil|copysign|div|eq|floor|[gl][et]|max|min|mul|nearest|neg?|sqrt|sub|trunc)\",\n    \"i(32|64)\\\\.(a[dn]d|c[lt]z|(div|rem)_[su]|eqz?|[gl][te]_[su]|mul|ne|popcnt|rot[lr]|sh(l|r_[su])|sub|x?or)\",\n    \"i64\\\\.extend_[su]_i32\",\n    \"i32\\\\.wrap_i64\",\n    \"i(32|64)\\\\.trunc_f(32|64)_[su]\",\n    \"f(32|64)\\\\.convert_i(32|64)_[su]\",\n    \"f64\\\\.promote_f32\",\n    \"f32\\\\.demote_f64\",\n    \"f32\\\\.reinterpret_i32\",\n    \"i32\\\\.reinterpret_f32\",\n    \"f64\\\\.reinterpret_i64\",\n    \"i64\\\\.reinterpret_f64\",\n    // Atomics.\n    \"memory(\\\\.((atomic\\\\.(notify|wait(32|64)))|grow|size))?\",\n    \"i64\\.atomic\\\\.(load32_u|store32|rmw32\\\\.(a[dn]d|sub|x?or|(cmp)?xchg)_u)\",\n    \"i(32|64)\\\\.atomic\\\\.(load((8|16)_u)?|store(8|16)?|rmw(\\\\.(a[dn]d|sub|x?or|(cmp)?xchg)|(8|16)\\\\.(a[dn]d|sub|x?or|(cmp)?xchg)_u))\",\n    // SIMD.\n    \"v128\\\\.load(8x8|16x4|32x2)_[su]\",\n    \"v128\\\\.load(8|16|32|64)_splat\",\n    \"v128\\\\.(load|store)(8|16|32|64)_lane\",\n    \"v128\\\\.load(32|64)_zero\",\n    \"v128\\.(load|store|const|not|andnot|and|or|xor|bitselect|any_true)\",\n    \"i(8x16|16x8)\\\\.(extract_lane_[su]|(add|sub)_sat_[su]|avgr_u)\",\n    \"i(8x16|16x8|32x4|64x2)\\\\.(neg|add|sub|abs|shl|shr_[su]|all_true|bitmask|eq|ne|[lg][te]_s)\",\n    \"(i(8x16|16x8|32x4|64x2)|f(32x4|64x2))\\.(splat|replace_lane)\",\n    \"i(8x16|16x8|32x4)\\\\.(([lg][te]_u)|((min|max)_[su]))\",\n    \"f(32x4|64x2)\\\\.(neg|add|sub|abs|nearest|eq|ne|[lg][te]|sqrt|mul|div|min|max|ceil|floor|trunc)\",\n    \"[fi](32x4|64x2)\\\\.extract_lane\",\n    \"i8x16\\\\.(shuffle|swizzle|popcnt|narrow_i16x8_[su])\",\n    \"i16x8\\\\.(narrow_i32x4_[su]|mul|extadd_pairwise_i8x16_[su]|q15mulr_sat_s)\",\n    \"i16x8\\\\.(extend|extmul)_(low|high)_i8x16_[su]\",\n    \"i32x4\\\\.(mul|dot_i16x8_s|trunc_sat_f64x2_[su]_zero)\",\n    \"i32x4\\\\.((extend|extmul)_(low|high)_i16x8_|trunc_sat_f32x4_|extadd_pairwise_i16x8_)[su]\",\n    \"i64x2\\\\.(mul|(extend|extmul)_(low|high)_i32x4_[su])\",\n    \"f32x4\\\\.(convert_i32x4_[su]|demote_f64x2_zero)\",\n    \"f64x2\\\\.(promote_low_f32x4|convert_low_i32x4_[su])\",\n    // Reference types, function references, and GC.\n    \"\\\\bany\\\\b\",\n    \"array\\\\.len\",\n    \"(array|struct)(\\\\.(new_(default_)?with_rtt|get(_[su])?|set))?\",\n    \"\\\\beq\\\\b\",\n    \"field\",\n    \"i31\\\\.(new|get_[su])\",\n    \"\\\\bnull\\\\b\",\n    \"ref(\\\\.(([ai]s_(data|func|i31))|cast|eq|func|(is_|as_non_)?null|test))?\",\n    \"rtt(\\\\.(canon|sub))?\",\n];\n\nCodeMirror.defineSimpleMode('wast', {\n  start: [\n    {regex: /[+\\-]?(?:nan(?::0x[0-9a-fA-F]+)?|infinity|inf|0x[0-9a-fA-F]+\\.?[0-9a-fA-F]*p[+\\/-]?\\d+|\\d+(?:\\.\\d*)?[eE][+\\-]?\\d*|\\d+\\.\\d*|0x[0-9a-fA-F]+|\\d+)/, token: \"number\"},\n    {regex: new RegExp(kKeywords.join('|')), token: \"keyword\"},\n    {regex: /\\b((any|data|eq|extern|i31|func)ref|[fi](32|64)|i(8|16))\\b/, token: \"atom\"},\n    {regex: /\\$([a-zA-Z0-9_`\\+\\-\\*\\/\\\\\\^~=<>!\\?@#$%&|:\\.]+)/, token: \"variable-2\"},\n    {regex: /\"(?:[^\"\\\\\\x00-\\x1f\\x7f]|\\\\[nt\\\\'\"]|\\\\[0-9a-fA-F][0-9a-fA-F])*\"/, token: \"string\"},\n    {regex: /\\(;.*?/, token: \"comment\", next: \"comment\"},\n    {regex: /;;.*$/, token: \"comment\"},\n    {regex: /\\(/, indent: true},\n    {regex: /\\)/, dedent: true},\n  ],\n\n  comment: [\n    {regex: /.*?;\\)/, token: \"comment\", next: \"start\"},\n    {regex: /.*/, token: \"comment\"},\n  ],\n\n  meta: {\n    dontIndentStates: ['comment'],\n  },\n});\n\n// https://github.com/WebAssembly/design/issues/981 mentions text/webassembly,\n// which seems like a reasonable choice, although it's not standard right now.\nCodeMirror.defineMIME(\"text/webassembly\", \"wast\");\n\n});\n"]},"metadata":{},"sourceType":"script"}